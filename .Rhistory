knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(randomForest)
library(mlbench)
library(tidyverse)
library(caret)
library(randomForest)
library(mlbench)
library(glmnet)
install.packages("mlbench")
library(mlbench)
data(BreastCancer)
head(BreastCancer)
dim(BreastCancer)
summary(BreastCancer$Class)
data(BostonHousing)
df = BostonHousing
colnames(df)
df[is.na(df)] = 0
correlation_matrix = cor(BreastCancer_num[,1:10])
correlation_matrix = cor(df[,1:10])
correlation_matrix = cor(df[,c(1:3, 5:13)])
#visualize correlation matrix
library(corrplot)
install.packages("corrplot")
#visualize correlation matrix
library(corrplot)
corrplot(correlation_matrix, order = "hclust")
#apply correlation filter of 0.7
highly_correlated <- colnames(df[,c(1:3, 5:13)])[findCorrelation(correlation_matrix, cutoff = 0.7, verbose = TRUE)]
#which features are highly correlated and can be removed
highly_correlated
train_size <- floor(0.75 * nrow(df))
train_pos <- sample(seq_len(nrow(df)), size = train_size)
#Using varimp plot after Random Forest model
train_size <- floor(0.70 * nrow(df))
train_pos <- sample(seq_len(nrow(df)), size = train_size)
train_classification <- df[train_pos, ]
test_classification <- df[-train_pos, ]
rfmodel = randomForest(crim ~ ., data=train_classification,  importance = TRUE, oob.times = 15, confusion = TRUE)
importance(rfmodel)
varImp(rfmodel)
varImpPlot(rfmodel)
highly_correlated
corrplot(correlation_matrix, order = "hclust")
correlation_matrix
correlation_matrix[,1]
correlation_crim = correlation_matrix[,1]
correlation_crim_sorted = sort(correlation_crim)
correlation_crim_sorted
correlation_crim_sorted = sort(correlation_crim, decreasing = F)
correlation_crim_sorted
correlation_crim_sorted = sort(correlation_crim, decreasing = T)
correlation_crim_sorted
varImpPlot(rfmodel)
library(MASS)
full.model <- lm(crim ~., data = df)
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
